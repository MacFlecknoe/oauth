<?xml version="1.0" encoding="UTF-8" ?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/security/oauth2 http://www.springframework.org/schema/security/spring-security-oauth2.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd">
		
	<bean id="clientAuthenticationEntryPoint"
		class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="oauth/client" />
		<property name="typeName" value="Basic" />
	</bean>

	<bean id="oauthAccessDeniedHandler"
		class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="accessDecisionManager" 
		class="org.springframework.security.access.vote.UnanimousBased"
		xmlns="http://www.springframework.org/schema/beans">
		<constructor-arg>
			<list>
				<bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
				<bean class="org.springframework.security.access.vote.RoleVoter" />
				<bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
			</list>
		</constructor-arg>
	</bean>
	
	<!-- looks up and transforms client information into a spring userdetails object-->
	<bean id="clientDetailsUserService"
		class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<!-- oauth_code table -->
	<bean id="authcodeServices" 
		class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
		<constructor-arg index="0" ref="dataSource"  />
	</bean>
	
	<!-- oauth_approvals table -->
	<!-- 
	<bean id="approvalStore" 
		class="org.springframework.security.oauth2.provider.approval.JdbcApprovalStore">
		<constructor-arg index="0" ref="dataSource"  />
	</bean>
	-->
	
	<!-- oauth_access_token, oauth_refresh_token -->
	<bean id="tokenStore" 
		class="org.springframework.security.oauth2.provider.token.JdbcTokenStore">
		<constructor-arg index="0" ref="dataSource" />
	</bean>
		
	<bean id="tokenServices"
		class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
		<property name="tokenEnhancer" ref="resourceOwnerTokenEnhancerTokenEnhancer" />
	</bean>
	
	<bean id="resourceOwnerTokenEnhancerTokenEnhancer" 
		class="com.jnj.wp.oauth.ws.ResourceOwnerTokenEnhancer" />

	<bean id="clientDetails" 
		class="org.springframework.security.oauth2.provider.JdbcClientDetailsService">
		<constructor-arg index="0" ref="dataSource"  />
	</bean>
	
	<!-- initializes AuthroizationEndPoint and TokenEndPoint? -->
	<oauth:authorization-server
		client-details-service-ref="clientDetails" token-services-ref="tokenServices">
		<oauth:authorization-code authorization-code-services-ref="authcodeServices"/>
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>
	
	<authentication-manager id="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	
	<!-- 
		default authentication manager as noted by its alias 
		test users should be removed before transition away from prototype stage
		used to secure /oauth/authorize 
	-->
	<authentication-manager alias="authenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<authentication-provider>
			<user-service id="userDetailsService">
				<user name="test" password="password" authorities="ROLE_USER" />
				<user name="dev" password="password" authorities="ROLE_USER" />
			</user-service>
		</authentication-provider>
	</authentication-manager>
	
	<!-- protects token url from unauthorized access -->
	<http pattern="/oauth/token" create-session="stateless"
		authentication-manager-ref="clientAuthenticationManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" method="GET" access="ROLE_DENY" />
		<intercept-url pattern="/**" method="PUT" access="ROLE_DENY" />
		<intercept-url pattern="/**" method="DELETE" access="ROLE_DENY" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<expression-handler ref="oauthExpressionHandler"/>
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>

	<!-- 
		secures /oauth/authorize. if we want to use traditional oauth flows this will need to be 
		revisited and a new userdetails service provisioned
	-->
	<http access-denied-page="/login.jsp?authorization_error=true"
		disable-url-rewriting="true" 
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<form-login authentication-failure-url="/login.jsp?authentication_error=true"
			default-target-url="/index.jsp" login-page="/login.jsp"
			login-processing-url="/login.do" />
		<logout logout-success-url="/index.jsp" logout-url="/logout.do" />
		<anonymous />
	</http>
	
	<!--  difference? -->
	<oauth:expression-handler id="oauthExpressionHandler" />
	<oauth:web-expression-handler id="oauthWebExpressionHandler" />
	
</beans>
